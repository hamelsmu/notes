"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3425],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2371:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var r=t(3117),a=(t(7294),t(3905));const o={},i=void 0,p={unversionedId:"k8s/ReplicaSets",id:"k8s/ReplicaSets",title:"ReplicaSets",description:"Hierachy is Deployments ->  ReplicaSets -> Pods -> Containers",source:"@site/docs/k8s/06-ReplicaSets.md",sourceDirName:"k8s",slug:"/k8s/ReplicaSets",permalink:"/k8s/ReplicaSets",draft:!1,editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/k8s/06-ReplicaSets.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Storage - Dynamic Provisioning",permalink:"/k8s/Storage - Dynamic Provisioning"},next:{title:"Scaling",permalink:"/k8s/Scaling"}},l={},c=[],s={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Hierachy is ",(0,a.kt)("inlineCode",{parentName:"p"},"Deployments ->  ReplicaSets -> Pods -> Containers")),(0,a.kt)("p",null,"You probably never need to fiddle with ReplicSets directly and will mostly operate at the ",(0,a.kt)("inlineCode",{parentName:"p"},"Deployment")," abstraction level that's mentioned in [","[2a. Basics]","].  "),(0,a.kt)("p",null,"The reason the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReplicaSet")," abstraction is used is that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Deployment")," turns the ",(0,a.kt)("inlineCode",{parentName:"p"},"replicas")," count to 0 when you update the metadata of podspec in a Deployment, as a way of gracefully winding down old pods in favor of new pods.  "),(0,a.kt)("p",null,"This is why sometimes you might see a ReplicaSet with a desired pod count of zero."),(0,a.kt)("p",null,"The way replicas are controled via deployments are through the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.replicas"),"  field:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'%cat  pi/proxy/nginx.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pi-proxy\n  labels:\n    kiamol: ch06\nspec:\n  replicas: 2  # Two replicas for nginx\n  selector:\n    matchLabels:\n      app: pi-proxy\n  template:\n    metadata:\n      labels:\n        app: pi-proxy\n    spec:\n      containers:\n        - image: nginx:1.17-alpine\n          name: nginx\n          ports:\n            - containerPort: 80\n              name: http\n          volumeMounts:\n            - name: config\n              mountPath: "/etc/nginx/"\n              readOnly: true\n            - name: cache-volume\n              mountPath: /data/nginx/cache\n      volumes:\n        - name: config\n          configMap:\n            name: pi-proxy-configmap\n        - name: cache-volume\n          emptyDir: {}\n')))}u.isMDXComponent=!0}}]);