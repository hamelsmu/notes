"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[9429],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,m=p["".concat(o,".").concat(d)]||p[d]||h[d]||l;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3901:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(7294),i=t(3743),l="tableOfContentsInline_prmo";function r(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:r}=e;return a.createElement("div",{className:l},a.createElement(i.Z,{toc:n,minHeadingLevel:t,maxHeadingLevel:r,className:"table-of-contents",linkClassName:null}))}},3743:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(3117),i=t(7294),l=t(6668);function r(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const a=t.slice(2,e.level);e.parentIndex=Math.max(...a),t[e.level]=n}));const a=[];return n.forEach((e=>{const{parentIndex:t,...i}=e;t>=0?n[t].children.push(i):a.push(i)})),a}function s(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return n.flatMap((e=>{const n=s({toc:e.children,minHeadingLevel:t,maxHeadingLevel:a});return function(e){return e.level>=t&&e.level<=a}(e)?[{...e,children:n}]:n}))}function o(e){const n=e.getBoundingClientRect();return n.top===n.bottom?o(e.parentNode):n}function u(e,n){let{anchorTopOffset:t}=n;const a=e.find((e=>o(e).top>=t));if(a){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(o(a))?a:e[e.indexOf(a)-1]??null}return e[e.length-1]??null}function c(){const e=(0,i.useRef)(0),{navbar:{hideOnScroll:n}}=(0,l.L)();return(0,i.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function p(e){const n=(0,i.useRef)(void 0),t=c();(0,i.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:a,linkActiveClassName:i,minHeadingLevel:l,maxHeadingLevel:r}=e;function s(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(a),s=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const a=[];for(let i=n;i<=t;i+=1)a.push(`h${i}.anchor`);return Array.from(document.querySelectorAll(a.join()))}({minHeadingLevel:l,maxHeadingLevel:r}),o=u(s,{anchorTopOffset:t.current}),c=e.find((e=>o&&o.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(i),e.classList.add(i),n.current=e):e.classList.remove(i)}(e,e===c)}))}return document.addEventListener("scroll",s),document.addEventListener("resize",s),s(),()=>{document.removeEventListener("scroll",s),document.removeEventListener("resize",s)}}),[e,t])}function h(e){let{toc:n,className:t,linkClassName:a,isChild:l}=e;return n.length?i.createElement("ul",{className:l?void 0:t},n.map((e=>i.createElement("li",{key:e.id},i.createElement("a",{href:`#${e.id}`,className:a??void 0,dangerouslySetInnerHTML:{__html:e.value}}),i.createElement(h,{isChild:!0,toc:e.children,className:t,linkClassName:a}))))):null}var d=i.memo(h);function m(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:o="table-of-contents__link",linkActiveClassName:u,minHeadingLevel:c,maxHeadingLevel:h,...m}=e;const k=(0,l.L)(),g=c??k.tableOfContents.minHeadingLevel,f=h??k.tableOfContents.maxHeadingLevel,b=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:a}=e;return(0,i.useMemo)((()=>s({toc:r(n),minHeadingLevel:t,maxHeadingLevel:a})),[n,t,a])}({toc:n,minHeadingLevel:g,maxHeadingLevel:f});return p((0,i.useMemo)((()=>{if(o&&u)return{linkClassName:o,linkActiveClassName:u,minHeadingLevel:g,maxHeadingLevel:f}}),[o,u,g,f])),i.createElement(d,(0,a.Z)({toc:b,className:t,linkClassName:o},m))}},3748:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return c}});var a=t(3117),i=(t(7294),t(3905)),l=t(3901);const r={title:"Cheatsheet"},s="Bash Scripting Class Linux Academy",o={unversionedId:"linux/bash_scripting",id:"linux/bash_scripting",title:"Cheatsheet",description:"- Link to class.",source:"@site/docs/linux/bash_scripting.md",sourceDirName:"linux",slug:"/linux/bash_scripting",permalink:"/linux/bash_scripting",draft:!1,editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/linux/bash_scripting.md",tags:[],version:"current",frontMatter:{title:"Cheatsheet"},sidebar:"tutorialSidebar",previous:{title:"Linux & Bash Scripting",permalink:"/linux/"},next:{title:"Cookbook",permalink:"/linux/cookbook"}},u={},c=[{value:"History of Bash",id:"history-of-bash",level:2},{value:"Bash Configuration",id:"bash-configuration",level:2},{value:".bash_profile",id:"bash_profile",level:3},{value:".bashrc",id:"bashrc",level:3},{value:".bash_history",id:"bash_history",level:3},{value:".bash_logout",id:"bash_logout",level:3},{value:"Shell Scripts",id:"shell-scripts",level:2},{value:"chmod u+x",id:"chmod-ux",level:3},{value:"Using Variables on The Command Line",id:"using-variables-on-the-command-line",level:3},{value:"Using Substitution with backticks",id:"using-substitution-with-backticks",level:4},{value:"Using Variables in Scripts",id:"using-variables-in-scripts",level:3},{value:"Command Subsitution",id:"command-subsitution",level:3},{value:"Exit Status",id:"exit-status",level:3},{value:"Using exit statues in a shell script",id:"using-exit-statues-in-a-shell-script",level:4},{value:"Arithmetic Operations",id:"arithmetic-operations",level:3},{value:"Global and Local Environment Variables",id:"global-and-local-environment-variables",level:2},{value:"<code>unset</code> : Delete An Environment Variable",id:"unset--delete-an-environment-variable",level:3},{value:"Special Characters: Quotes &amp; Escapes",id:"special-characters-quotes--escapes",level:2},{value:"Using dev/null",id:"using-devnull",level:2},{value:"Redirect  Std Error",id:"redirect--std-error",level:2},{value:"Redirect Std Out &amp; Err into one file",id:"redirect-std-out--err-into-one-file",level:2},{value:"Dispose Std Err output <code>/dev/null</code>",id:"dispose-std-err-output-devnull",level:2},{value:"Brace Expansion",id:"brace-expansion",level:2},{value:"Parameter Expansion, Like Coalesce",id:"parameter-expansion-like-coalesce",level:2},{value:"Readonly Variables",id:"readonly-variables",level:4},{value:"Types of Variables",id:"types-of-variables-1",level:2},{value:"Iterating Through Arrays",id:"iterating-through-arrays",level:3},{value:"Passing Variables to Scripts at the Command Line",id:"passing-variables-to-scripts-at-the-command-line",level:3},{value:"The if statement",id:"the-if-statement",level:2},{value:"If/Then/Else",id:"ifthenelse",level:2},{value:"File Expressions",id:"file-expressions",level:2},{value:"String Expressions",id:"string-expressions",level:2},{value:"Integer Expressions",id:"integer-expressions",level:2},{value:"For Loop",id:"for-loop",level:2},{value:"Case Statement",id:"case-statement",level:2},{value:"Match Multiple Case Statements",id:"match-multiple-case-statements",level:3},{value:"While Loop",id:"while-loop",level:2},{value:"Asynchronous Execution with <code>wait</code>",id:"asynchronous-execution-with-wait",level:2},{value:"Short Circuit Expressions",id:"short-circuit-expressions",level:2},{value:"&amp;&amp;: <code>command1 &amp;&amp; command2</code>:",id:"-command1--command2",level:3},{value:"||: <code>command1 || command2</code>:",id:"-command1--command2-1",level:3},{value:"Reading Files",id:"reading-files",level:2},{value:"Reading Files with loops",id:"reading-files-with-loops",level:2},{value:"File Descriptors",id:"file-descriptors",level:2},{value:"Delimiters (IFS)",id:"delimiters-ifs",level:2},{value:"Traps and Signals",id:"traps-and-signals",level:2},{value:"structure of functions in a shell script",id:"structure-of-functions-in-a-shell-script",level:2},{value:"Scope",id:"scope",level:2},{value:"Functions With Parameters",id:"functions-with-parameters",level:2},{value:"Nested Functions",id:"nested-functions",level:2},{value:"Function Return and Exit",id:"function-return-and-exit",level:2},{value:"Infobox",id:"infobox",level:2},{value:"Msgbox",id:"msgbox",level:2},{value:"Menus",id:"menus",level:2}],p={toc:c};function h(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bash-scripting-class-linux-academy"},"Bash Scripting Class Linux Academy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://linuxacademy.com/linux/training/course/name/the-system-administrators-guidep-to-bash-scripting"},"Link")," to class."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hamelsmu/bash_scripting"},"Link")," to GitHub repo")),(0,i.kt)(l.Z,{toc:c,mdxType:"TOCInline"}),";",(0,i.kt)("h2",{id:"history-of-bash"},"History of Bash"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"was originally a program called ",(0,i.kt)("inlineCode",{parentName:"li"},"bin/sh")),(0,i.kt)("li",{parentName:"ul"},"Bourne Shell: introduced more advanced structure into the shell.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Bourne Again Shell (Bash):"),"  Second iteration of Bourne Shell.")),(0,i.kt)("h2",{id:"bash-configuration"},"Bash Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"ls -a ~/ | grep bash\n    \uf489  .bash_history\n    \uf489  .bash_profile\n    \uf15b  .bash_profile.backup\n    \uf15b  .bash_profile.bensherman\n    \uf15b  .bash_profile_copy\n    \uf115  .bash_sessions/\n    \uf489  git-completion.bash\n")),(0,i.kt)("h3",{id:"bash_profile"},".bash_profile"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},".bash_profile"),": executed when you ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," -> configures the shell when you get an initial command prompt.  This is different than ",(0,i.kt)("inlineCode",{parentName:"p"},".bashrc"),".  ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"commonly loads the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bashrc")," file as well. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bin")," is traditionally the folder for binaries.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"bash_profile")," is designed to run when you login, so if you change it will not refresh until you login next time.  "))),(0,i.kt)("h3",{id:"bashrc"},".bashrc"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},".bashrc")," it is executed simply before the command shell comes up, does not have to wait until you login.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"etc/bashrc"),' are system bashrc files which is like a "template" for user bashrc files.  Anytime a new user is created, it inherits from this template and sometimes automated customizations are applied.  This is usually done by simply importing ',(0,i.kt)("inlineCode",{parentName:"p"},"etc/bashrc")," from each user's ",(0,i.kt)("inlineCode",{parentName:"p"},"bashrc")," file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"env")," will list all env variables.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"to apply ",(0,i.kt)("inlineCode",{parentName:"p"},".bashrc")," you just have to run the command ",(0,i.kt)("inlineCode",{parentName:"p"},"bash")," as it will start another shell from your current one.  However, if you run ",(0,i.kt)("inlineCode",{parentName:"p"},"bash")," you can now ",(0,i.kt)("inlineCode",{parentName:"p"},"exit")," without closing the shell, because a shell is running inside another shell."))),(0,i.kt)("h3",{id:"bash_history"},".bash_history"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_history")," contains lots of history.  By default will only capture last 100 but you can change this setting.  ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"you can exlude something from saving to history (like passwords) by using an ",(0,i.kt)("inlineCode",{parentName:"p"},"ignorespace"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"HIST_CONTROL")," can be used to control how much history to keep and settings about what should not be logged.  One way to turn off loggin is:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"export HISTCONTROL=$HISTCONTROL:ignorespace\n")),(0,i.kt)("p",{parentName:"li"},"  this allow you to skip logging by adding a space to the the beginning of any command.  If you want to see what is in ",(0,i.kt)("inlineCode",{parentName:"p"},"HIST_CONTROL")," you will see:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"> cat ~/.bash_history | grep HISTCONTROL\nHISTCONTROL=ignoredups:ignorespace\n")),(0,i.kt)("p",{parentName:"li"},"  ignoredups was already set to this variable."))),(0,i.kt)("h3",{id:"bash_logout"},".bash_logout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Doesn't always exist on a system.  in most cases the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_logout")," will be empty or contain a comment.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The role of this file is to execute things when you exit the shell.  If you close the shell it will ",(0,i.kt)("strong",{parentName:"p"},"not work"),", you have to do a ",(0,i.kt)("strong",{parentName:"p"},"clean exit")," instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Common use is to use this to clear out ~/.bashrc with the original to clear out any changes the user may have made.  You can accomplish this by copying a backup:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cp ~/.bashrc.original ~/.bashrc\n")))),(0,i.kt)("h2",{id:"shell-scripts"},"Shell Scripts"),(0,i.kt)("p",null,"Put your shell scripts in a folder you can find them.  We can put them in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/bin"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"> mkdir bin\n")),(0,i.kt)("p",null,"Make sure in ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bash_profile")," you have:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"PATH=$PATH:$HOME/bin\nexport PATH\n")),(0,i.kt)("h3",{id:"chmod-ux"},"chmod u+x"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To make ",(0,i.kt)("inlineCode",{parentName:"li"},"test.sh")," executable run command ",(0,i.kt)("inlineCode",{parentName:"li"},"chmod u+x test.sh"))),(0,i.kt)("p",null,"You can also run ",(0,i.kt)("inlineCode",{parentName:"p"},"chmod 755")),(0,i.kt)("h3",{id:"using-variables-on-the-command-line"},"Using Variables on The Command Line"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"can use any name that is not an environment variable (check with ",(0,i.kt)("inlineCode",{parentName:"p"},"env"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"by convention variable names in ALLCAPS."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'> FIRSTNAME="Hamel"\n')),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'- No space b/w = and value.\n- Good idea to __always__ put value in double quotes `"`, although this is not required in every case.  \n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As a practice you want to use ",(0,i.kt)("inlineCode",{parentName:"p"},"export")," command to set is as an environment variable.  This makes the variable available to any subprocess that starts from the shell.  Read more about this ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/1158091/defining-a-variable-with-or-without-export"},"here"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'> export FIRSTNAME\n> echo "Hello, $FIRSTNAME"\n"Hello Hamel"\n\n> export FIRSTNAME="Hamel" # do this in one step\n')),(0,i.kt)("p",{parentName:"li"},"  The above example could work without ",(0,i.kt)("inlineCode",{parentName:"p"},"export"),", too just reinforcing that its a good idea to use this as a habit.  You can do this in one step:\n"))),(0,i.kt)("h4",{id:"using-substitution-with-backticks"},"Using Substitution with backticks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"> export TODAYSDATE=`date`  # executes date command\n")),(0,i.kt)("h3",{id:"using-variables-in-scripts"},"Using Variables in Scripts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'```bash\nMYUSERNAME=\'hamel\'\nMYPASSWORD=\'password\'\nSTARTOFSCRIPT=`date`\n\necho "My login name for this app is $MYUSERNAME"\necho "My login password for this app is $MYPASSWORD"\necho "I started this script at $STARTOFSCRIPT"\n\nENDOFSCRIPT=`date`\n\necho "I ended the script at $ENDOFSCRIPT"\n```\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"These variables only live within the sub-shell that executes the script.")),(0,i.kt)("h3",{id:"command-subsitution"},"Command Subsitution"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method 1 (Static)"),": Assign command result to variable.  Only runs the command at time of variable assignment.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    TODAYSDATE=`date`\n    USERFILES=`find /home -user user` # find all directories owned by the user "user"\n\n    echo "Today\'s Date: $TODAYSDATE"\n    echo "All files owned by USER: $USERFILES"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method 2"),": Use an alias, which allows you to run a command every time you call the alias. For aliases to work this way you must use the ",(0,i.kt)("strong",{parentName:"li"},"shopt"),' command, which allows aliases to be useable in shell scripts.  Technically referred to as "expanding aliases within a subshell".')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    #!/bin/bash\n    shopt -s expand_aliases\n\n    # notice that we don\'t use backticks here because the command we want to execute is put in ".."\n    alias TODAY="date" \n    alias UFILES="find /home -user user"\n\n\n    A=`TODAY` #Executes the command date\n    B=`UFILES`#Executes the command \n    echo "With Alias, TODAY is: $A" echo "With Alias, UFILES is: $B"\n')),(0,i.kt)("h3",{id:"exit-status"},"Exit Status"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Value = 0 means everything is ok")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Value != 0 means something is wrong.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"See last exit status w/ the ",(0,i.kt)("inlineCode",{parentName:"p"},"$?")," command:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    > ls\n    > echo $?\n    0\n")),(0,i.kt)("h4",{id:"using-exit-statues-in-a-shell-script"},"Using exit statues in a shell script"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unlike python, shell scripts will continue executing even if there is an error.  You can prevent this by using ",(0,i.kt)("inlineCode",{parentName:"li"},"set -e"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    set -e # means exit the shell if there is an error, don't continue.\n")),(0,i.kt)("h3",{id:"arithmetic-operations"},"Arithmetic Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    expr 1 + 2\n    expr 2 \\* 2 # you have to escape the *\n    expr \\( 2 + 2 \\) \\* 4  # you must also escape the ( )\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Caveat: ",(0,i.kt)("strong",{parentName:"li"},"You need a space")," on each side of the operator.")),(0,i.kt)("h2",{id:"global-and-local-environment-variables"},"Global and Local Environment Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"env")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"printenv")," will tell you your global vars")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"set")," will give you things from your session. This will also usually contain everything from your global scope.  ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," is a superset of ",(0,i.kt)("inlineCode",{parentName:"p"},"env"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Reserved names: see study guide or google it."))),(0,i.kt)("h3",{id:"unset--delete-an-environment-variable"},(0,i.kt)("inlineCode",{parentName:"h3"},"unset")," : Delete An Environment Variable"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unset MY_VAR")),(0,i.kt)("h2",{id:"special-characters-quotes--escapes"},"Special Characters: Quotes & Escapes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$")," escapes a single character."),(0,i.kt)("li",{parentName:"ul"},"single quotes ",(0,i.kt)("inlineCode",{parentName:"li"},"'"),"..",(0,i.kt)("inlineCode",{parentName:"li"},"'")," treats something as a string, escapes the whole thing"),(0,i.kt)("li",{parentName:"ul"},"double quotes do ",(0,i.kt)("strong",{parentName:"li"},"not escape anything"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'> echo "\\$COL"  # this will escape the $\n$COL\n\n> echo \'$COL\' # single quotes escape things, means the literal string\n$COL\n\n> echo "$COL" # does not escape anything\n250\n\n> echo "The date is: `date`" # command substitution with bacticks\nThe date is Mon Jul 25\n')),(0,i.kt)("h1",{id:"redirecting-output"},"Redirecting Output"),(0,i.kt)("h2",{id:"using-devnull"},"Using dev/null"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"dev/null")," when you want to discard output and don't want to put in the background. ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/null")," is a device, and like everything is a file in linux.  Everything you write to ",(0,i.kt)("inlineCode",{parentName:"p"},"dev/null")," just dissapears."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n#redirect to dev/null example\n\necho "This is going to the blackhole." >> /dev/null\n')),(0,i.kt)("p",null,"Note ",(0,i.kt)("inlineCode",{parentName:"p"},">>")," (append) or ",(0,i.kt)("inlineCode",{parentName:"p"},">")," (overwrite) will work for dev/null, although out of habit in other scenarios it is better to append when unsure using ",(0,i.kt)("inlineCode",{parentName:"p"},">>"),"."),(0,i.kt)("h2",{id:"redirect--std-error"},"Redirect  Std Error"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls -l /bin/usr 2> ls-error.txt")),(0,i.kt)("h2",{id:"redirect-std-out--err-into-one-file"},"Redirect Std Out & Err into one file"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls  -l /bin/sur > ls-output.txt 2>&1")),(0,i.kt)("p",null,"Shortcut: use ",(0,i.kt)("inlineCode",{parentName:"p"},"&")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls  -l /bin/sur &> ls-output.txt")),(0,i.kt)("h2",{id:"dispose-std-err-output-devnull"},"Dispose Std Err output ",(0,i.kt)("inlineCode",{parentName:"h2"},"/dev/null")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ls -l /bin/sur 2> /dev/null")),(0,i.kt)("h1",{id:"the-read-statement"},"The Read Statement"),(0,i.kt)("p",null,"note the backticks and the ",(0,i.kt)("inlineCode",{parentName:"p"},"expr")," command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Enter Your First Name: "\nread FIRSTNAME\n\necho "Enter Your Last Name"\nread LASTNAME\n\necho "Your Full Name is $FIRSTNAME $LASTNAME"\n\necho "Enter Your Age: "\nread USERAGE\n\necho "In 10 Years, You will be `expr $USERAGE + 10` years old."\n')),(0,i.kt)("h1",{id:"shell-expansion"},"Shell Expansion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'> echo sh{ot,oot,ort}\nshot shoot short\n\n> echo st{il,al}l\nstill stall\n\n> echo "$[ 2 * 2 ]"\n4\n\n# set and display var at same time\n> echo "${VARNAME:=something}"\nsomething\n> echo $VARNAME\nsomething\n\n# will print any environment variable that starts with HO\n> echo "${!HO*}"\nOME HOSTNAME HOSTTYPE\n')),(0,i.kt)("h2",{id:"brace-expansion"},"Brace Expansion"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> echo Hello-{Foo,Bar,Baz}-World                             \nHello-Foo-World Hello-Bar-World Hello-Baz-World\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(8739).Z,width:"779",height:"186"})),(0,i.kt)("h2",{id:"parameter-expansion-like-coalesce"},"Parameter Expansion, Like Coalesce"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"{parameter:-word}")),(0,i.kt)("p",null,"If parameter is unset (i.e., does not exist) or is empty, this expansion results in the value of word. If parameter is not empty, the expansion results in the value of parameter."),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(4818).Z,width:"1676",height:"494"})),(0,i.kt)("h1",{id:"types-of-variables"},"Types of Variables"),(0,i.kt)("p",null,"Variables are declared implicitly, and the value will implicitly determine what kind of variable it is.  However, it could be useful to explicitly define the type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# an integer variable\nMYVAR=4\n\n# use command substitution\n> echo `expr $MYVAR + 5`\n9\n")),(0,i.kt)("p",null,"Show the type of the variable, using ",(0,i.kt)("inlineCode",{parentName:"p"},"decalre -p")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'MYVAR=4\n\n# this shows you MYVAR is a string\n> declare -p MYVAR\ndeclare -- MYVAR="4"\n')),(0,i.kt)("p",null,"Interpreting the output of ",(0,i.kt)("inlineCode",{parentName:"p"},"declare -p"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," tells you that this variable is not strongly typed and its type has not been declared."),(0,i.kt)("p",null,"Set the type of the variable, using ",(0,i.kt)("inlineCode",{parentName:"p"},"decalre -i"),"\n",(0,i.kt)("strong",{parentName:"p"},"notice how the value is converted to zero")," when setting ",(0,i.kt)("inlineCode",{parentName:"p"},"NEWVAR")," to a string when you have declared it as an integer. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'> declare -i NEWVAR=10\n> declare -p NEWVAR\ndeclare -i NEWVAR="10"\n\n> NEWVAR="Hello"\n> echo $NEWVAR\n0\n')),(0,i.kt)("p",null,"Notice in the output instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," we have ",(0,i.kt)("inlineCode",{parentName:"p"},"-i")," which means this variable is an integer."),(0,i.kt)("h4",{id:"readonly-variables"},"Readonly Variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'> declare -r READONLY="This is a string we cannot overwrite"\n> declare -p READONLY\ndeclare -r READONLY="This is a string we cannot overwrite"\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-r")," in the output confirms this is a readonly variable. "),(0,i.kt)("p",null,"Equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"declare -r"),", using the ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'readonly MYREADONLY="This String"\n')),(0,i.kt)("h2",{id:"types-of-variables-1"},"Types of Variables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# declare int variable:\n> declare -i NEWVAR=10\n\n# inpsect type of NEWVAR\n> declare -p NEWVAR\ndeclare -i NEWVAR="10"\n\n# declare readonly variable\n> declare -r READONLY="This is something we cannot overwrite"\n\n# try to cancel READONLY type\n> declare +r READONLY\n### will result in an error\n')),(0,i.kt)("p",null,"Variables in bash are implicitly typed, the type will be inferred from the value you assign."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"determine the type of a variable: ",(0,i.kt)("inlineCode",{parentName:"li"},"declare -p $MYVAR")),(0,i.kt)("li",{parentName:"ul"},"declare variable as integer: ",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"declare -i NEWVAR=10\n"))),(0,i.kt)("li",{parentName:"ul"},"If you explicitly declare a variable as an int but assign it to a string, it will implicitly convert the value to ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,i.kt)("h1",{id:"arrays"},"Arrays"),(0,i.kt)("p",null,"Indexing ",(0,i.kt)("strong",{parentName:"p"},"starts at zero."),"  Notice that arrays are ",(0,i.kt)("strong",{parentName:"p"},"space-delimited."),", this is a strange thing if you are used to arrays w/commas."),(0,i.kt)("p",null,"You can have spaces in values if you enclose the spaces in double-quotes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# notice no commas just spaces!\n> MYARRAY=(\u201cFirst\u201d \u201cSecond\u201d \u201cThird\u201d)\n> echo ${MYARRAY[2]}\n\u201cThird\u201d\n")),(0,i.kt)("h3",{id:"iterating-through-arrays"},"Iterating Through Arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n# simple array list and loop for display\n\nSERVERLIST=(\u201cwebsrv01\u201d \u201cwebsrv02\u201d \u201cwebsrv03\u201d)\nCOUNT=0\n\nfor INDEX in ${SERVERLIST[@]}; do\n    echo \u201cProcessing Server: ${SERVERLIST[COUNT]}\u201d\n    COUNT=\u201c`expr $COUNT + 1 `\u201d\ndone\n")),(0,i.kt)("p",null,"You cannot decrease the size of the array, you can only increase the size of the array."),(0,i.kt)("h3",{id:"passing-variables-to-scripts-at-the-command-line"},"Passing Variables to Scripts at the Command Line"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo \u201cThe following item was passed to the script at run time $1\u201d\n")),(0,i.kt)("p",null,"The arguments go from 1-n (starts at 1)."),(0,i.kt)("p",null,"if you have an argument that contains a space, then you wan to enclose this in quotes, otherwhise space is seen as a delimiter."),(0,i.kt)("h1",{id:"conditionals"},"Conditionals"),(0,i.kt)("h2",{id:"the-if-statement"},"The if statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"3\necho \u201cGuess the Secret Number\u201d\necho \u201c======================\u201c\necho \u201c\u201d\necho \u201cEnter a Number Between 1 and 5\u201d\nread GUESS\n\n\nif [ $GUESS -eq 3 ]\n    then\n        echo \u201cYou guessed the Correct Number!\u201d\nfi\n")),(0,i.kt)("p",null,"Test if a file exists"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"FILENAME=$1\necho \u201cTesting for the existence of a file called $FILENAME\u201d\n\nif [ -a $FILENAME ]\n    then\n        echo \u201c$FILENAME does exist!\u201d\nfi\n\n# negation operator \nif [! -a $FILENAME ]\n    then\n        echo \u201c$FILENAME does not exist!\u201d\nfi\n\n# test multiple expressions in if statement\n\nif [ -f $FILENAME ] && [ -R $FILENAME]\n    then\n        echo \u201cFile $FILENAME exists and is readable.\u201d\nfi\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-a")," is the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"-f")," w.r.t. testing for the existence of a file."),(0,i.kt)("h2",{id:"ifthenelse"},"If/Then/Else"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo \u201cEnter a number between 1 and 3:\u201d\nread VALUE\n\n# use semicolons for readability\nif [ \u201c$VALUE\u201d -eq \u201c1\u201d ]; then\n    echo \u201cYou entered $VALUE\u201d\nfi\n")),(0,i.kt)("p",null,"Using an OR statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# another variation\nif [ \u201c$VALUE\u201d -eq \u201c1\u201d ] || [ \u201c$VALUE\u201d -eq \u201c2\u201d ] || [ \u201c$VALUE\u201d -eq \u201c3\u201d ]; then\n    echo \u201cYou entered $VALUE\u201d\nelse\n    echo \u201cYou didn\u2019t follow directions!\u201d\nfi\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Redirect errors to /dev/null")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'if [ \u201c$VALUE\u201d -eq \u201c1\u201d ] 2>/dev/null || [ \u201c$VALUE\u201d -eq \u201c2\u201d ] 2>/dev/null || [ \u201c$VALUE\u201d -eq \u201c3\u201d ] 2>/dev/null; then\n    echo \u201cYou entered $VALUE\u201d\nelse\n    echo \u201cYou didn\u2019t follow directions!\u201d\nfi\n\nif [ \u201c$VALUE\u201d -eq \u201c1\u201d ] 2>/dev/null; then\n    echo \u201cYou entered #1\u201d\nelif \u201c "$VAL\u201dE" -e\u201c \u201d2" ] 2>/dev/null; then\n    ech\u201c "You entered \u201d2"\nelif \u201c "$VAL\u201dE" -e\u201c \u201d3" ] 2>/dev/null; then\n    ech\u201c "You entered \u201d3"\nelse\n    ech\u201c "You di\u2019n\'t follow direction\u201d!"\nfi\n')),(0,i.kt)("h1",{id:"conditional-expressions"},"Conditional Expressions"),(0,i.kt)("p",null,"Hamel's Note: Use Double Brackets ",(0,i.kt)("inlineCode",{parentName:"p"},"[[ ]]"),", not single brackets"),(0,i.kt)("h2",{id:"file-expressions"},"File Expressions"),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(981).Z,width:"828",height:"765"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(7003).Z,width:"825",height:"400"})),(0,i.kt)("h2",{id:"string-expressions"},"String Expressions"),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(7657).Z,width:"805",height:"397"})),(0,i.kt)("h2",{id:"integer-expressions"},"Integer Expressions"),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(6404).Z,width:"763",height:"319"})),(0,i.kt)("h1",{id:"aside-output-streams"},"Aside: Output Streams"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://askubuntu.com/questions/625224/how-to-redirect-stderr-to-a-file"},"https://askubuntu.com/questions/625224/how-to-redirect-stderr-to-a-file")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1"),": stdout"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2"),": stderr"),(0,i.kt)("p",null,"error messages are printed to standard error. The classic redirection operator (command > file) only redirects standard output, so standard error is still shown on the terminal. To redirect stderr as well, you have a few choices:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Redirect stdout to one file and stderr to another file:\ncommand > out 2>error\n\n# Redirect stderr to stdout (&1), and then redirect stdout to a file:\n\ncommand >out 2>&1\n\n# Redirect both to a file (this isn\u2019t supported by all shells, bash and zsh support it, for example, but sh and ksh do not)\ncommand &> out\n")),(0,i.kt)("h1",{id:"control-flow"},"Control Flow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"break")," exits the loop"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"continue")," goes to next iteration in loop"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"until")," is opposite of while")),(0,i.kt)("h2",{id:"for-loop"},"For Loop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\necho \u201cList all the shell scripts contents of the directory\u201d\nSHELLSCRIPTS=`ls *.sh`\n\n# alternate using for loop\n\nfor FILE in *.sh; do\n    echo \u201c$FILE\u201d\ndone\n")),(0,i.kt)("h2",{id:"case-statement"},"Case Statement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\necho \u201c1) Choice 2\u201d\necho \u201c2) Choice 2\u201d\necho \u201c3) Choice 3\u201d\necho \u201cEnter Choice:\u201d\n\nread MENUCHOICE\n\ncase $MENUCHOICE in\n    1)\n        echo \u201cYou have choosen the first option\u201d;;\n    2)\n        echo \u201cYou have chosen the second option\u201d;;\n    3) \n        echo \u201cYou have selected the third option\u201d;;\n    *)\n        echo \u201cYou have choosen unwisely\u201d;;\n")),(0,i.kt)("h3",{id:"match-multiple-case-statements"},"Match Multiple Case Statements"),(0,i.kt)("p",null,"Allow many matches to occur"),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(9339).Z,width:"1224",height:"1166"})),(0,i.kt)("h2",{id:"while-loop"},"While Loop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\necho \u201cEnter number of times to display message:\u201d\nread NUM\n\nCOUNT=1\n\n# -le means less than or equal to\nwhile [ $COUNT -le $NUM ]\ndo\n    echo \u201cHello World $COUNT\u201d\n    COUNT=\u201c`expr $COUNT + 1`\u201d\ndone\n")),(0,i.kt)("h2",{id:"asynchronous-execution-with-wait"},"Asynchronous Execution with ",(0,i.kt)("inlineCode",{parentName:"h2"},"wait")),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(8462).Z,width:"1418",height:"1224"})),(0,i.kt)("p",null,"This is the most straightforward implementation of async I have ever seen.  You basically decide when to block and wait for a process that you previously decided to run in a child process.  "),(0,i.kt)("h2",{id:"short-circuit-expressions"},"Short Circuit Expressions"),(0,i.kt)("h3",{id:"-command1--command2"},"&&: ",(0,i.kt)("inlineCode",{parentName:"h3"},"command1 && command2"),":"),(0,i.kt)("p",null," only run ",(0,i.kt)("inlineCode",{parentName:"p"},"command2")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"command1")," is successful"),(0,i.kt)("h3",{id:"-command1--command2-1"},"||: ",(0,i.kt)("inlineCode",{parentName:"h3"},"command1 || command2"),":"),(0,i.kt)("p",null,"only run ",(0,i.kt)("inlineCode",{parentName:"p"},"command2")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"command1")," fails"),(0,i.kt)("h1",{id:"execution-operators"},"Execution Operators"),(0,i.kt)("p",null,"the file super duper does not exist"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rm superduper 2> /dev/null && echo "File was deleted"\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"echo")," will only execute if the ",(0,i.kt)("inlineCode",{parentName:"p"},"rm")," command was successful and exits without errors.  Therefore, in this case the ",(0,i.kt)("inlineCode",{parentName:"p"},"echo")," statement will not be triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rm superduper 2> /dev/null && echo "File was deleted" || echo "File does not exit"\n')),(0,i.kt)("p",null,"Because of short-circuiting rules, the second statement of the OR || will not trigger unless the left hand side is false. "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"&&")," :  and"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"||")," :  or")),(0,i.kt)("h1",{id:"inputoutput"},"Input/Output"),(0,i.kt)("h2",{id:"reading-files"},"Reading Files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo \u201cEnter a filename\u201d \nread FILE\n\nwhile read -r SUPERHERO; do\n    echo \u201cSuperhero Name: $SUPERHERO\u201d\ndone < \u201c$FILE\u201d\n")),(0,i.kt)("h2",{id:"reading-files-with-loops"},"Reading Files with loops"),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(9497).Z,width:"966",height:"416"})),(0,i.kt)("h2",{id:"file-descriptors"},"File Descriptors"),(0,i.kt)("p",null,"Use a number >= 3 for file descriptors."),(0,i.kt)("p",null,"0 - stdin\n1 - stdout\n2 - stderr"),(0,i.kt)("p",null,"/dev/null -> generic place where you can redirect streams into nothing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\necho \u201cEnter file name: \u201c\nread FILE\n\n# < means readonly,  > means write only,  <> means allow read & write\n# assign file descriptor to filename\nexec 5<>$FILE\n\nwhile read -r SUPERHERO; do\n    echo \u201cSuperhero Name: $SUPERHERO\u201d\ndone <&5 #use & to reference the file descriptor\n\n# append to end of file.\necho "File Was Read On: `date`" >&5\n\n# close file descriptor\nexec 5>&-\n')),(0,i.kt)("h2",{id:"delimiters-ifs"},"Delimiters (IFS)"),(0,i.kt)("p",null,"IFS - Internal Field Seperator\nDefault is a space"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# this will return a space\necho $IFS\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Enter filename to parse: "\nread FILE # spacedelim.txt\n\n# https://stackoverflow.com/questions/24337385/bash-preserve-string-with-spaces-input-on-command-line\n\nwhile read -r CPU MEM DISK; do\n    echo "CPU: $CPU"\n    echo "Memory: $MEM"\n    echo "Disk: $DISK"\ndone <"$FILE"\n')),(0,i.kt)("h2",{id:"traps-and-signals"},"Traps and Signals"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html"},"https://www.gnu.org/software/libc/manual/html_node/Termination-Signals.html")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cntrl+c")," = SIGINT"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cntrl+z")," = SIGTSTP"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kill")," command (without -9 flag) = SIGTERM"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kill -9")," = SIGKILL;  this signal is not sent to the process, it is just killed.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'clear\n\n# first argument is what to exexute \ntrap \'echo " - Please Press Q to Exit."\' SIGINT SIGTERM SIGTSTP\n\n# cntrl+c = SIGINT\n# cntrl+z = SIGTSTP  (Suspend, send to background)\n\n\n\nwhile [ "$CHOICE" != "Q" ] && [ "$CHOICE" != "q" ]; do\n    echo "Main Menu"\n    echo "======="\n    echo "1) Choice One"\n    echo "2) Choice Two"\n    echo "3) Choice Three"\n    echo "Q) Quit"\n    read CHOICE\n\n    clear\ndone\n')),(0,i.kt)("h1",{id:"debugging-shell-scripts"},"Debugging Shell Scripts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bash -x")," will run a shell script in debug mode."),(0,i.kt)("p",null,"google this to figure out how to interpret output of debugging."),(0,i.kt)("h1",{id:"error-handling"},"Error Handling"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$?")," contains the status code of the last command."),(0,i.kt)("p",null,"What if you have the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\necho "Change to a directory and list the contents"\nDIRECTORY="$1"\ncd $DIRECTORY\n\n# DANGER: the below command will still run even if the previous command failed!\nrm *\n')),(0,i.kt)("p",null,"Solution:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'DIRECTORY="$1"\ncd $DIRECTORY\n\nif [ $? -eq "0" ]; then\n    echo "Changed directory successfully into $DIRECTORY"\nelse\n    echo "Cannot change driectories, exiting with error."\n    exit 111 # you can exit with any code you want!\nfi\n')),(0,i.kt)("h1",{id:"functions"},"Functions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'\nfuncExample () {\n    echo "We are inside the function"\n}\n\n#call the function\nfuncExample\n\n')),(0,i.kt)("h2",{id:"structure-of-functions-in-a-shell-script"},"structure of functions in a shell script"),(0,i.kt)("p",null,"Unlike python, ",(0,i.kt)("strong",{parentName:"p"},"you must define your functions before you call them.")),(0,i.kt)("h2",{id:"scope"},"Scope"),(0,i.kt)("p",null,"setting a variable within a function ",(0,i.kt)("strong",{parentName:"p"},"defines that variable globally")," after that function is called!!!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"GLOBALVAR=\u201cGlobally Visible\u201d\n\n# sample function for function variable scope\nfuncExample () {\n    # local\n    LOCALVAR=\u201cLocally Visible\u201d\n\n    echo \u201cFrom within the function, the variable\u2019s value is set to $LOCALVAR \u2026\u201d\n}\n\n# script start\n\necho \u201cthis happens before the function call\u201d\necho \u201c\u201d\necho \u201cLocal Variable = $LOCALVAR after the function call.\u201d\necho \u201cGlobal Variable = $GLOBALVAR (before the function call).\u201d\n\nfuncExample\n\necho \u201cthis happens after the function call\u201d\necho \u201cLocal Variable = $LOCALVAR after the function call.\u201d\necho \u201cGlobal Variable = $GLOBALVAR (before the function call).\u201d\n")),(0,i.kt)("p",null,"Output of above code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\ue0b0 ./scope.sh\nthis happens before the function call\n\nLocal Variable =  after the function call.\nGlobal Variable = Globally Visible (before the function call).\nFrom within the function, the variable\u2019s value is set to Locally Visible \u2026\nthis happens after the function call\nLocal Variable = Locally Visible after the function call.\nGlobal Variable = Globally Visible (before the function call).\n")),(0,i.kt)("h2",{id:"functions-with-parameters"},"Functions With Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# global\nUSERNAME=$1\n\nfuncAgeInDays () {\n    echo \u201cHello $USERNAME, You are $1 Years old.\u201d\n    echo \u201cThat makes you approx `expr 365 \\* $1` days old\u201d\n}\n\n#script - start\nread -r -p \u201cEnter your age:\u201d AGE\n\n# pass in arguments like this\nfuncAgeInDays $AGE\n")),(0,i.kt)("h2",{id:"nested-functions"},"Nested Functions"),(0,i.kt)("p",null,"Author of course uses this for organization purposes.  When you call a function if it has nested functions the functions defined within will be exposed to the script also."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# global\nGENDER=$1\n\nfuncHuman () {\n    ARMS=2\n    LEGS=2\n\n    funcMale () {\n        BEARD=1\n        echo \u201cThis man has $ARMS arms and $LEGS legs with $BEARD beard\u201d\n    }\n\n    funcFemale () {\n        BEARD=0\n        echo \u201cThis woman has $ARMS arms and $LEGS legs with $BEARD beard\u201d\n    }\n}\n\n# script start\nclear\n\n# determine the actual gender and display the characteristics.\nif  [ \u201c$GENDER\u201d == \u201cmale\u201d ]; then\n    funcHuman\n    funcMale # this function is available after the parent function is called.\nelse\n    funcHuman\n    funcFemale\nfi\n")),(0,i.kt)("h2",{id:"function-return-and-exit"},"Function Return and Exit"),(0,i.kt)("p",null,"This allows you to get arguments from the command line and then exit with a proper code and also use function returns inside scripts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# demo of return values and testing results\n\nYES=0\nNO=1\nFIRST=$1\nSECOND=$2\nTHIRD=$3\n\n# function definitions\n\nfuncCheckParams () {\n    # did we get three\n    # -z equivalent to isnull (in this case means not-null b/c of !)\n    if [ ! -z \u201c$THIRD\u201d ]; then\n        echo \u201cWe got three params\u201d\n        return $YES\n    else\n        echo \u201cWe did not get three params\u201d\n        return $NO\n    fi\n}\n\n# script start\n\nfuncCheckParams\n# the return value from the function gets stored in $?\nRETURN_VALS=$?\n\nif [ \u201c$RETURN_VALS\u201d -eq \u201c$YES\u201d ]; then\n    echo \u201cWe received three params and they are:\u201d\n    echo \u201cParam 1: $FIRST\u201d\n    echo \u201cParam 2: $SECOND\u201d\n    echo \u201cParam 3: $THIRD\u201d\nelse\n    echo \u201cUsage: funcreturn.sh [param1] [param2] [param3]\u201d\n    exit 1\nfi\n")),(0,i.kt)("h1",{id:"interactive-menus"},"Interactive Menus"),(0,i.kt)("h2",{id:"infobox"},"Infobox"),(0,i.kt)("p",null,"Dissappears unless you sleep (see below).  Does not come with any buttons. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# globals\nINFOBOX=${INFOBOX=dialog}\nTITLE=\u201cDefault\u201d\nMESSAGE=\u201cSomething to say\u201d\nXCOORD=10\nYCOORD=20\n\nfuncDisplayInfoBox () {\n    $INFOBOX \u2014title \u201c$1\u201d \u2014infobox \u201c$2\u201d \u201c$3\u201d \u201c$4\u201d\n    sleep \u201c$5\u201d\n}\n")),(0,i.kt)("h2",{id:"msgbox"},"Msgbox"),(0,i.kt)("p",null,"Msgbox - dissapears unless you sleep pass ",(0,i.kt)("inlineCode",{parentName:"p"},"--msgbox")," argument, comes with default ok button and stays on screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# global\nMSGBOX=${MSGBOX=dialog}\nTITLE=\u201cDefault\u201d\nMESSAGE=\u201cSome Message\u201d\nXCOORD=10\nYCOORD=20\n\nfuncDisplayMsgBox () {\n    $MSGBOX \u2014title \u201c$1\u201d \u2014msgbox \u201c$2\u201d \u201c$3\u201d \u201c$4\u201d\n}\n")),(0,i.kt)("h2",{id:"menus"},"Menus"),(0,i.kt)("p",null,"See pdf notes/scripts"))}h.isMDXComponent=!0},981:function(e,n,t){n.Z=t.p+"assets/images/04C3BAEC-A2B6-4EDF-B61D-7F290E5C94BE-4b292f10e54856641344f154099824b9.png"},6404:function(e,n,t){n.Z=t.p+"assets/images/1F1BC194-36CA-4949-83A5-0EB99A150F18-c63915ba5139a28a7ae850401b501547.png"},7657:function(e,n,t){n.Z=t.p+"assets/images/7E21E94F-714E-48EB-9819-6CF33D414404-a6b176351636c2446af34231302d04eb.png"},9339:function(e,n,t){n.Z=t.p+"assets/images/B619EA40-60AC-43A9-91F2-D38B9AF88B29-c5a9f97b956d317893d6f9a1b9a90af0.png"},4818:function(e,n,t){n.Z=t.p+"assets/images/B8AEEDCB-6411-4AAB-9A5E-60DFBF77338A-097ff13867b7abab3fb790a7054fffc0.png"},7003:function(e,n,t){n.Z=t.p+"assets/images/C96B41FA-AF66-421D-96BC-B3EA0FA39139-5b8de294c93cb4d8f9d7ab7a7802536d.png"},9497:function(e,n,t){n.Z=t.p+"assets/images/D08C1840-7C02-4212-AC01-C968DB36EC81-4298029dda99d85641603742259d97bd.png"},8462:function(e,n,t){n.Z=t.p+"assets/images/D58576C6-9AEA-4124-8575-2A3406CC6590-70b6c069a7c0f45bfcd75cbff3252195.png"},8739:function(e,n,t){n.Z=t.p+"assets/images/FFE1D5B6-3600-45F3-98EA-E5D8D8E38339-5e4302ce62bfb7309d424d2163cc9c80.png"}}]);