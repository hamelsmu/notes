"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[1776],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?a.createElement(h,r(r({ref:n},p),{},{components:t})):a.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const i={},r=void 0,l={unversionedId:"k8s/Multi Container Pods",id:"k8s/Multi Container Pods",title:"Multi Container Pods",description:"Pods can run more than one container.  Pods in a container share the same network and same IP address, so they must listen on different ports.   Containers in a pod can communicate over local host.  Each container has its own file system, but can mount from the Pod and can share info that way.",source:"@site/docs/k8s/08-Multi Container Pods.md",sourceDirName:"k8s",slug:"/k8s/Multi Container Pods",permalink:"/k8s/Multi Container Pods",draft:!1,editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/k8s/08-Multi Container Pods.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scaling",permalink:"/k8s/Scaling"},next:{title:"Ambassador Sidecars",permalink:"/k8s/Ambassador Sidecars"}},s={},c=[{value:"Accessing containers in multi-container Pods",id:"accessing-containers-in-multi-container-pods",level:2},{value:"Networking Sharing",id:"networking-sharing",level:2},{value:"Creating A Serivce to Multi Container Pod",id:"creating-a-serivce-to-multi-container-pod",level:3},{value:"When to use multi cotainer pods",id:"when-to-use-multi-cotainer-pods",level:2}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Pods can run more than one container.  Pods in a container share the same network and same IP address, so they must listen on different ports.   Containers in a pod can communicate over local host.  Each container has its own file system, but can mount from the Pod and can share info that way. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"% cat sleep/sleep-with-file-reader.yaml                                                                                              \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sleep\n  labels:\n    kiamol: ch07\nspec:\n  selector:\n    matchLabels:\n      app: sleep\n  template:\n    metadata:\n      labels:\n        app: sleep\n    spec:\n      containers:\n        - name: sleep\n          image: kiamol/ch03-sleep\n          volumeMounts:\n            - name: data                 # This must match the Name of a Volume.\n\n              mountPath: /data-rw\n        - name: file-reader # you can run same image in pod but need different name.  You usually wouldnt do this.\n          image: kiamol/ch03-sleep \n          volumeMounts:\n            - name: data                    # the name corresponds to a volume\n              mountPath: /data-ro\n              readOnly: true\n      volumes:\n        - name: data                     # this is the name that is used to mount\n          emptyDir: {}   # All pods can access this\n")),(0,o.kt)("h2",{id:"accessing-containers-in-multi-container-pods"},"Accessing containers in multi-container Pods"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-c")," flag, to narrow down the container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"% kl logs deploy/sleep -c file-reader\n")),(0,o.kt)("p",null,"Same thing is necessary for ",(0,o.kt)("inlineCode",{parentName:"p"},"kl exec deploy/sleep ..."),", you would also add ",(0,o.kt)("inlineCode",{parentName:"p"},"-c file-reader")," onto that. "),(0,o.kt)("h2",{id:"networking-sharing"},"Networking Sharing"),(0,o.kt)("p",null,"To demonstrate network sharing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"% cat sleep/sleep-with-server.yaml                                                                                                   \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sleep\n  labels:\n    kiamol: ch07\nspec:\n  selector:\n    matchLabels:\n      app: sleep\n  template:\n    metadata:\n      labels:\n        app: sleep\n    spec:\n      containers:\n        - name: sleep\n          image: kiamol/ch03-sleep\n        - name: server\n          image: kiamol/ch03-sleep\n          command: ['sh', '-c', \"while true; do echo -e 'HTTP/1.1 200 OK\\nContent-Type: text/plain\\nContent-Length: 7\\n\\nkiamol' | nc -l -p 8080; done\"]\n          ports:\n            - containerPort: 8080    # this exposes a port to this container.\n              name: http\n")),(0,o.kt)("p",null,"We can access the ",(0,o.kt)("inlineCode",{parentName:"p"},"server")," container on local host from the ",(0,o.kt)("inlineCode",{parentName:"p"},"sleep")," container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kl apply -f sleep/sleep-with-server.yaml\nkl exec deploy/sleep -c sleep -- wget -q -O - localhost:8080\n")),(0,o.kt)("h3",{id:"creating-a-serivce-to-multi-container-pod"},"Creating A Serivce to Multi Container Pod"),(0,o.kt)("p",null,"You just have to make sure that the port is routing to the correct place. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: sleep\nspec:\n  ports:\n    - port: 8020\n      targetPort: 8080\n  selector:\n    app: sleep\n  type: LoadBalancer\n")),(0,o.kt)("p",null,"Now from my lapto I can do this, which will allow me to access the container listening in the pod on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8080")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"wget -q -O - localhost:8020\n")),(0,o.kt)("h2",{id:"when-to-use-multi-cotainer-pods"},"When to use multi cotainer pods"),(0,o.kt)("p",null,"You don't want to usually shove different components of an application into a Pod together!  Doing so will limit you, as you want to be able to scale/upgrade etc these different components independently.  "),(0,o.kt)("p",null,"There are two patterns:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"[","[Sidecar]","]  runs alongside; pod isn't considered ",(0,o.kt)("inlineCode",{parentName:"li"},"ready")," until all the containers are ready.  ",(0,o.kt)("strong",{parentName:"li"},"This is what is shown above.")),(0,o.kt)("li",{parentName:"ol"},"[","[Init containers]","]  you can have multiple init containers, they run in sequence, in order they are specified.  Each must complete sucessfully before next one starts, and all must complete sucessfully before the Pod  containers start (if mulitple they are sidecars) ")),(0,o.kt)("p",null,"Init containers are often used to generate data for container Pods (which is written to a shared mounted directory as previously shown).  An example is an ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," container w/ the git command line installed that clones a repo to a shared file system.   Another example is to write configuration files in a specific format that your app expects from env variables and config maps. "),(0,o.kt)("p",null,"The below YAML shows the ",(0,o.kt)("inlineCode",{parentName:"p"},"initContainer")," craeating the index.html file so the next imge can serve it.   "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"% cat sleep/sleep-with-html-server.yaml                                                                                              \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n...\nspec:\n  selector:\n    matchLabels:\n      app: sleep\n  template:\n...\n    spec:\n      initContainers:\n        - name: init-html\n          image: kiamol/ch03-sleep\n          command: ['sh', '-c', \"echo '<!DOCTYPE html><html><body><h1>KIAMOL Ch07</h1></body></html>' > /data/index.html\"]\n          volumeMounts:\n            - name: data\n              mountPath: /data\n      containers:\n        - name: sleep\n          image: kiamol/ch03-sleep\n        - name: server\n          image: kiamol/ch03-sleep\n          command: ['sh', '-c', 'while true; do echo -e \"HTTP/1.1 200 OK\\nContent-Type: text/html\\nContent-Length: 62\\n\\n$(cat /data-ro/index.html)\" | nc -l -p 8080; done']\n          ports:\n            - containerPort: 8080\n              name: http\n          volumeMounts:\n            - name: data\n              mountPath: /data-ro\n              readOnly: true\n")),(0,o.kt)("p",null,"Here is an example that writes a config file callled ",(0,o.kt)("inlineCode",{parentName:"p"},"appsettings.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n    spec:\n      initContainers:\n        - name: init-config\n          image: kiamol/ch03-sleep\n          command: ['sh', '-c', \"cat /config-in/appsettings.json | jq --arg APP_ENV \\\"$APP_ENVIRONMENT\\\" '.Application.Environment=$APP_ENV' > /config-out/appsettings.json\"]\n          env:\n          - name: APP_ENVIRONMENT\n            value: TEST\n          volumeMounts:\n            - name: config-map\n              mountPath: /config-in\n            - name: config-dir\n              mountPath: /config-out\n...\n      volumes:\n        - name: config-map     # this is a volume that is mounted as input\n          configMap:\n            name: timecheck-config\n        - name: config-dir     # files are written out here\n          emptyDir: {}\n")),(0,o.kt)("h1",{id:"init-containers"},"Init Containers"),(0,o.kt)("p",null,"You can still inspect logs of init containers even after they have exited.  See example above"),(0,o.kt)("h1",{id:"logging-with-sidecars"},"Logging With Sidecars"),(0,o.kt)("p",null,"This is a pedagogical example of why sidecars could be useful.   This is a sidecar that would emit the logs to stdout from your app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"%cat timecheck/timecheck-with-logging.yaml\n      containers:\n        - name: timecheck\n          image: kiamol/ch07-timecheck\n          volumeMounts:\n            - name: config-dir\n              mountPath: /config\n              readOnly: true\n            - name: logs-dir\n              mountPath: /logs\n        - name: logger               # This is the sidecar\n          image: kiamol/ch03-sleep\n          command: ['sh', '-c', 'tail -f /logs-ro/timecheck.log']\n          volumeMounts:\n            - name: logs-dir\n              mountPath: /logs-ro\n              readOnly: true\n")),(0,o.kt)("p",null,"You can use sidecars to monitor your app as well.  for example, you can build standard health and metrics container images."))}m.isMDXComponent=!0}}]);