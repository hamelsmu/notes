"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[2632],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9044:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={title:"Pod restart vs. replacement",description:"What's the difference b/w a restart and a replacement?",image:"https://user-images.githubusercontent.com/1483922/207999452-843eaa73-a36a-41e1-afea-58357620a4c3.png"},i=void 0,l={unversionedId:"k8s/Pod-Lifecycle",id:"k8s/Pod-Lifecycle",title:"Pod restart vs. replacement",description:"What's the difference b/w a restart and a replacement?",source:"@site/docs/k8s/19-Pod-Lifecycle.md",sourceDirName:"k8s",slug:"/k8s/Pod-Lifecycle",permalink:"/k8s/Pod-Lifecycle",draft:!1,editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/k8s/19-Pod-Lifecycle.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{title:"Pod restart vs. replacement",description:"What's the difference b/w a restart and a replacement?",image:"https://user-images.githubusercontent.com/1483922/207999452-843eaa73-a36a-41e1-afea-58357620a4c3.png"},sidebar:"tutorialSidebar",previous:{title:"Developer tips",permalink:"/k8s/Developer"},next:{title:"Probes",permalink:"/k8s/health-checks"}},s={},c=[{value:"What causes a restart vs replacement",id:"what-causes-a-restart-vs-replacement",level:2},{value:"Forcing a container to exit",id:"forcing-a-container-to-exit",level:2},{value:"Storage Implications",id:"storage-implications",level:2}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you google Pod restart vs replacement, virutally every article conflates the two, but the distinction is very important!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"restart"),": all the containers in the pod are restarted, but the pod is guaranteed to stay on the same node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"replacement"),": the pod is removed and rebuilt, and may appear on a different node.")),(0,r.kt)("p",null,"A good way to test if some event causes a restart vs a replacment is to see if the UID for the pod remains the same or not before vs. after the event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -o custom-columns=PodName:.metadata.name,PodUID:.metadata.uid\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If the pod name is auto-generated, like how it is with a usual deployment, the pod name will change, too.  If the pod name changes, then you know for sure the pod was replaced. "),(0,r.kt)("p",{parentName:"admonition"},"However, when in doubt, check the UID.")),(0,r.kt)("p",null,"A pod with the same UID is guaranteed to be running on the same node, since it has only been restarted."),(0,r.kt)("p",null,"This article on ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/"},"Pod lifecycle")," is helpful."),(0,r.kt)("h2",{id:"what-causes-a-restart-vs-replacement"},"What causes a restart vs replacement"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"restart"),": ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"failed liveliness probe (I confirmed with the UID that this restarts the Pod)."),(0,r.kt)("li",{parentName:"ul"},"When a container exits the pod will be restarted according to the ",(0,r.kt)("inlineCode",{parentName:"li"},"restartPolicy")," in the podspec."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"replacement"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kubectl rollout restart")," Yes!  It ",(0,r.kt)("strong",{parentName:"li"},"replaces"),' the pod, I checked and the UID changes!  Don\'t get foooled by the word "restart"'),(0,r.kt)("li",{parentName:"ul"},"deleting the resource (ex: ",(0,r.kt)("inlineCode",{parentName:"li"},"kubectl delete deploy/..."),")"),(0,r.kt)("li",{parentName:"ul"},"scaling the resource to zero (ex: ",(0,r.kt)("inlineCode",{parentName:"li"},"kubectl scale deployment ..."),")"),(0,r.kt)("li",{parentName:"ul"},"If you change the podspec.")))),(0,r.kt)("p",null,"If unsure do some experiments!"),(0,r.kt)("h2",{id:"forcing-a-container-to-exit"},"Forcing a container to exit"),(0,r.kt)("p",null,"You can force a container to exit with the following command.  This might be useful for testing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kl exec -it {pod name} -- killall5\n")),(0,r.kt)("p",null,"This will cause the pod to restart the container, not replace it."),(0,r.kt)("h2",{id:"storage-implications"},"Storage Implications"),(0,r.kt)("p",null,"Storage that exists at the Pod-level, like ",(0,r.kt)("inlineCode",{parentName:"p"},"emptyDir")," will survive a Pod restart, but NOT a pod replacement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"...\nspec:\n containers:\n   - name: myimage\n     image: repo/image\n     volumeMounts:\n      - name: data                 # Mounts a volume called data\n         mountPath: /data          # into the /data directory\n volumes:\n   - name: data                    # This is the data volume spec,\n     emptyDir: {}                  # which is the EmptyDir type.\n")),(0,r.kt)("p",null,"Any data stored in an ",(0,r.kt)("inlineCode",{parentName:"p"},"EmptyDir")," volume remains in the Pod between restarts, so Pod's that are restarted can access data written by their predecessors. An ",(0,r.kt)("inlineCode",{parentName:"p"},"EmptyDir")," volume can be a reasonable source for a local cache because if the app crashes, then the replacement container will still have the cached files."))}d.isMDXComponent=!0}}]);