"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[32],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,f=m["".concat(p,".").concat(d)]||m[d]||s[d]||a;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1201:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},assets:function(){return u},toc:function(){return s},default:function(){return d}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],l={title:"pandoc filters"},p=void 0,c={unversionedId:"pandoc/filters",id:"pandoc/filters",title:"pandoc filters",description:"Two python packages",source:"@site/docs/pandoc/filters.md",sourceDirName:"pandoc",slug:"/pandoc/filters",permalink:"/pandoc/filters",editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/pandoc/filters.md",tags:[],version:"current",frontMatter:{title:"pandoc filters"},sidebar:"tutorialSidebar",previous:{title:"Processes, Permissions and Moving Data",permalink:"/linux/permprocdata"},next:{title:"programming languages",permalink:"/programming-languages/pl"}},u={},s=[{value:"Minimal ipynb to md converstion with pandoc",id:"minimal-ipynb-to-md-converstion-with-pandoc",level:2},{value:"Minimal ipynb to md converstion with quarto",id:"minimal-ipynb-to-md-converstion-with-quarto",level:2},{value:"Running Pandoc With those Extensions",id:"running-pandoc-with-those-extensions",level:2},{value:"How to use panflute",id:"how-to-use-panflute",level:2}],m={toc:s};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Two python packages"),(0,a.kt)("div",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://scorreia.com/software/panflute/"},"panflute")," - recommended"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/jgm/pandocfilters"},"pandocfilters"))),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://pandoc.org/filters.html"},"tutorial")," on pandoc filters can help you get setup.  If rolling your own filters, you probably want to use the JSON filters and make use of the ",(0,a.kt)("inlineCode",{parentName:"p"},"-t native")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pandoc -s -t native test.txt\n")),(0,a.kt)("h2",{id:"minimal-ipynb-to-md-converstion-with-pandoc"},"Minimal ipynb to md converstion with pandoc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ pandoc --to gfm minimal.ipynb\n<div class="cell markdown">\n\n## A minimal notebook\n\n</div>\n\n<div class="cell code" execution_count="1">\n\n``` python\n# Do some arithmetic\n1+1\n```\n\n<div class="output execute_result" execution_count="1">\n\n    2\n\n</div>\n\n</div>\n')),(0,a.kt)("h2",{id:"minimal-ipynb-to-md-converstion-with-quarto"},"Minimal ipynb to md converstion with quarto"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ quarto render minimal.ipynb --to gfm\npandoc\n  to: gfm+footnotes+tex_math_dollars-yaml_metadata_block\n  output-file: minimal.md\n  standalone: true\n  default-image-extension: png\n  filters:\n    - crossref\n\nOutput created: minimal.md\n")),(0,a.kt)("p",null,"This creates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"## A minimal notebook\n\n``` python\n# Do some arithmetic\n1+1\n```\n\n    2\n")),(0,a.kt)("h2",{id:"running-pandoc-with-those-extensions"},"Running Pandoc With those Extensions"),(0,a.kt)("p",null,"running pandoc with ",(0,a.kt)("inlineCode",{parentName:"p"},"--standalone --to gfm+footnotes+tex_math_dollars-yaml_metadata_block")," creates the same result."),(0,a.kt)("h2",{id:"how-to-use-panflute"},"How to use panflute"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sergiocorreia/panflute-filters"},"examples")," are helpful."),(0,a.kt)("p",null,"This filter places ",(0,a.kt)("inlineCode",{parentName:"p"},"CodeOutput")," blocks around code as well as changes the codefence to have ",(0,a.kt)("inlineCode",{parentName:"p"},"file=script.py")," in order to hack the code fence."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'#!/Users/hamel/opt/anaconda3/bin/python\n#flute.py\nfrom typing import Text\nfrom panflute import *\nfrom logging import warning\n\n\ndef increase_header_level(elem, doc):\n    if type(elem) == CodeBlock and type(elem.parent.prev) == CodeBlock:\n        return ([RawBlock("<CodeOutput>"), elem, RawBlock("</CodeOutput>")])\n    elif type(elem) == CodeBlock:\n        elem.classes = [\'file=script.py\']\n\n\ndef main(doc=None):\n    return run_filter(increase_header_level, doc=doc)\n\n\nif __name__ == "__main__":\n    main()\n')),(0,a.kt)("p",null,"Seeing the output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ pandoc --to gfm minimal.ipynb --filter "flute.py"\n<div class="cell markdown">\n\n## A minimal notebook\n\n</div>\n\n<div class="cell markdown">\n\n<MyTag></MyTag>\n\n</div>\n\n<div class="cell code" execution_count="1">\n\n``` file=script.py\n# Do some arithmetic\nprint(1+1)\n```\n\n<div class="output stream stdout">\n\n<CodeOutput>\n\n    2\n\n</CodeOutput>\n\n</div>\n\n</div>\n')),(0,a.kt)("p",null,"Note: we could probably replace the inner div with the ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," class with ",(0,a.kt)("inlineCode",{parentName:"p"},"<CodeOutput>")," tag"),(0,a.kt)("p",null,"Just for completeness, this is the schema of the minimal notebook using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--to native")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'pandoc --to native minimal.ipynb\n[ Div\n    ( "" , [ "cell" , "markdown" ] , [] )\n    [ Header\n        2\n        ( "a-minimal-notebook" , [] , [] )\n        [ Str "A" , Space , Str "minimal" , Space , Str "notebook" ]\n    ]\n, Div\n    ( "" , [ "cell" , "markdown" ] , [] )\n    [ Para\n        [ RawInline (Format "html") "<MyTag>"\n        , RawInline (Format "html") "</MyTag>"\n        ]\n    ]\n, Div\n    ( ""\n    , [ "cell" , "code" ]\n    , [ ( "execution_count" , "1" ) ]\n    )\n    [ CodeBlock\n        ( "" , [ "python" ] , [] )\n        "# Do some arithmetic\\nprint(1+1)"\n    , Div\n        ( "" , [ "output" , "stream" , "stdout" ] , [] )\n        [ CodeBlock ( "" , [] , [] ) "2\\n" ]\n    ]\n]\n')))}d.isMDXComponent=!0}}]);