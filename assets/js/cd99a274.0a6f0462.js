"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||h[d]||i;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={title:"Cookbook"},l="A Cookbook of Shell Scripts - Wicked Shell Scripts, 2d Edition",r={unversionedId:"linux/cookbook",id:"linux/cookbook",title:"Cookbook",description:"You should browse the table of contents of this book and use the shell scripts contained within off the shelf if possible.",source:"@site/docs/linux/cookbook.md",sourceDirName:"linux",slug:"/linux/cookbook",permalink:"/linux/cookbook",draft:!1,editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/linux/cookbook.md",tags:[],version:"current",frontMatter:{title:"Cookbook"},sidebar:"tutorialSidebar",previous:{title:"Cheatsheet",permalink:"/linux/bash_scripting"},next:{title:"Misc Utilities",permalink:"/linux/misc_utils"}},s={},c=[{value:"<code>shift</code>  and <code>$#</code>  pop args off and count args",id:"shift--and---pop-args-off-and-count-args",level:2},{value:"Using shift for CLI options:",id:"using-shift-for-cli-options",level:3},{value:"<code>$*</code> collect all arguments",id:"-collect-all-arguments",level:2},{value:"Multi Option Case Statement",id:"multi-option-case-statement",level:2},{value:"Another example of case statement",id:"another-example-of-case-statement",level:3},{value:"Collecting stdout with <code>-</code>",id:"collecting-stdout-with--",level:2},{value:"Formatting Long Lines <code>fmt</code>",id:"formatting-long-lines-fmt",level:2},{value:"IFS - Internal Field Seperator",id:"ifs---internal-field-seperator",level:2},{value:"IFS in Great Expectations Action",id:"ifs-in-great-expectations-action",level:3},{value:"IFS for iterating through $PATH",id:"ifs-for-iterating-through-path",level:3},{value:"IFS: Double vs. Single Quotes",id:"ifs-double-vs-single-quotes",level:3},{value:"$RANDOM",id:"random",level:2},{value:"Debugging Shell Scripts <code>-x</code>",id:"debugging-shell-scripts--x",level:2},{value:"Sourcing files with <code>. </code>",id:"sourcing-files-with--",level:2},{value:"Using functions to set exit codes",id:"using-functions-to-set-exit-codes",level:2},{value:"Know if someone running the script directly with  <code>$BASH_SOURCE</code>",id:"know-if-someone-running-the-script-directly-with--bash_source",level:2},{value:"<code>xargs</code>",id:"xargs",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"a-cookbook-of-shell-scripts---wicked-shell-scripts-2d-edition"},"A Cookbook of Shell Scripts - Wicked Shell Scripts, 2d Edition"),(0,a.kt)("p",null,"You should browse the table of contents of ",(0,a.kt)("a",{parentName:"p",href:"https://nostarch.com/wcss2"},"this book")," and use the shell scripts contained within off the shelf if possible.  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GitHub: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/"},"https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/")),(0,a.kt)("li",{parentName:"ul"},"Link to book on GitHub:  ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/blob/master/WickedCoolShellScripts2E.pdf"},"https://github.com/hamelsmu/wicked_cool_shell_scripts_2e/blob/master/WickedCoolShellScripts2E.pdf")),(0,a.kt)("li",{parentName:"ul"},"Book: ",(0,a.kt)("a",{parentName:"li",href:"https://nostarch.com/wcss2"},"https://nostarch.com/wcss2"))),(0,a.kt)("h1",{id:"things-learned-from-the-cookbook"},"Things Learned From The Cookbook"),(0,a.kt)("p",null,"In addition to just using the library of shell scripts,  I also learned the following bash tidbits from this book."),(0,a.kt)("h2",{id:"shift--and---pop-args-off-and-count-args"},(0,a.kt)("inlineCode",{parentName:"h2"},"shift"),"  and ",(0,a.kt)("inlineCode",{parentName:"h2"},"$#"),"  pop args off and count args"),(0,a.kt)("p",null,"shift.sh"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\nwhile (( $# )); do\n    echo "process args: $1"\n    shift\ndone\n')),(0,a.kt)("p",null,"Results in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./shift.sh foo bar bash                                                                             \nprocess args: foo\nprocess args: bar\nprocess args: bash\n")),(0,a.kt)("h3",{id:"using-shift-for-cli-options"},"Using shift for CLI options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\n# newquota--A frontend to quota that works with full-word flags a la GNU\n\n# quota has three possible flags, -g, -v, and -q, but this script\n#   allows them to be \'--group\', \'--verbose\', and \'--quiet\' too:\n\nflags=""\nrealquota="$(which quota)"\n\nwhile [ $# -gt 0 ]\ndo\n  case $1\n  in\n    --help)  echo "Usage: $0 [--group --verbose --quiet -gvq]" >&2\n                       exit 1 ;;\n    --group )  flags="$flags -g";       shift ;;\n    --verbose)  flags="$flags -v";   shift ;;\n    --quiet)  flags="$flags -q";       shift ;;\n    --)  shift;           break ;;\n    *)  break;          # done with \'while\' loop!\n  esac\ndone\n\nexec $realquota $flags "$@"\n\n')),(0,a.kt)("h2",{id:"-collect-all-arguments"},(0,a.kt)("inlineCode",{parentName:"h2"},"$*")," collect all arguments"),(0,a.kt)("p",null,"shift2.sh"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"#!/bin/bash\nfor var in $*; do\n    echo $var\ndone\n")),(0,a.kt)("p",null,"Results in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./shift2.sh foo bar bash                                                                             \nprocess args: foo\nprocess args: bar\nprocess args: bash\n")),(0,a.kt)("h2",{id:"multi-option-case-statement"},"Multi Option Case Statement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'while read command args\ndo\n  case $command\n  in\n    quit|exit) exit 0                                  ;;\n    help|\\?)   show_help                               ;;\n    scale)     scale=$args                             ;;\n    *)         scriptbc -p $scale "$command" "$args"  ;;\n  esac\n\n  /bin/echo -n "calc> "\ndone\n')),(0,a.kt)("h3",{id:"another-example-of-case-statement"},"Another example of case statement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'  case $1 in\n    1 ) month="Jan"    ;;  2 ) month="Feb"    ;;\n    3 ) month="Mar"    ;;  4 ) month="Apr"    ;;\n    5 ) month="May"    ;;  6 ) month="Jun"    ;;\n    7 ) month="Jul"    ;;  8 ) month="Aug"    ;;\n    9 ) month="Sep"    ;;  10) month="Oct"    ;;\n    11) month="Nov"    ;;  12) month="Dec"    ;;\n    * ) echo "$0: Unknown numeric month value $1" >&2; exit 1\n  esac\n  return 0\n\n')),(0,a.kt)("h2",{id:"collecting-stdout-with--"},"Collecting stdout with ",(0,a.kt)("inlineCode",{parentName:"h2"},"-")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'echo "Enter something: " | cat -')),(0,a.kt)("h2",{id:"formatting-long-lines-fmt"},"Formatting Long Lines ",(0,a.kt)("inlineCode",{parentName:"h2"},"fmt")),(0,a.kt)("p",null,"Will make lines no longer than 30 characters, not cutting off any words."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fmt -w30 long_text.txt")),(0,a.kt)("h2",{id:"ifs---internal-field-seperator"},"IFS - Internal Field Seperator"),(0,a.kt)("p",null,"Sets the internal delimiter"),(0,a.kt)("p",null,"ifs_variable.sh"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\nIFS=":"\nvar=\'a:b-c~d\'\nfor n in $var\ndo\n    echo "$n"\ndone\n')),(0,a.kt)("p",null,"Results in "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./1/ifs_variable.sh\na\nb-c~d\n")),(0,a.kt)("h3",{id:"ifs-in-great-expectations-action"},"IFS in Great Expectations Action"),(0,a.kt)("p",null,"I'm using this in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/superconductive/great_expectations_action"},"Great Expectations Action")," to parse a list of arguments given as a string to an input"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Loop through checkpoints\nSTATUS=0\nIFS=\',\'\nfor c in $INPUT_CHECKPOINTS;do\n    echo ""\n    echo "Validating Checkpoint: ${c}"\n    if ! great_expectations checkpoint run $c; then\n        STATUS=1\n    fi\ndone\n')),(0,a.kt)("h3",{id:"ifs-for-iterating-through-path"},"IFS for iterating through $PATH"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'#!/bin/bash\nIFS=":"\nfor directory in $PATH ; do\n   echo $directory\ndone\n')),(0,a.kt)("h3",{id:"ifs-double-vs-single-quotes"},"IFS: Double vs. Single Quotes"),(0,a.kt)("p",null,"With double quotes the outcome of the command expansion would be fed as one parameter to the source command. Without quotes it would be broken up into multiple parameters, depending on the value of IFS which contains space, TAB and newline by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'var="some value"\n\n# $var fed into cmd as one parameter\ncmd "$var"\n\n# $var is fed into cmd as two parameters\n#  delimted by the default IFS character, space\ncmd \'$var\'\n\n')),(0,a.kt)("h2",{id:"random"},"$RANDOM"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"echo $RANDOM")," will print out a random number"),(0,a.kt)("h2",{id:"debugging-shell-scripts--x"},"Debugging Shell Scripts ",(0,a.kt)("inlineCode",{parentName:"h2"},"-x")),(0,a.kt)("p",null,"Debug a script:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"bash -x myscript.sh")),(0,a.kt)("p",null,"OR, within a script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"set -x # start debugging\n./myscript.sh\nset +x # stop debugging\n")),(0,a.kt)("p",null,"All variables will be substituted and lines that are run will be printed to screen, showing the control flow of the program"),(0,a.kt)("h2",{id:"sourcing-files-with--"},"Sourcing files with ",(0,a.kt)("inlineCode",{parentName:"h2"},". ")),(0,a.kt)("p",null,'So you can "import" scripts'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},". myscript.sh\n# is equivalent to\nsource myscript.sh\n")),(0,a.kt)("h2",{id:"using-functions-to-set-exit-codes"},"Using functions to set exit codes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'\nvalidAlphaNum()\n{\n  # Validate arg: returns 0 if all upper+lower+digits, 1 otherwise.\n  # Remove all unacceptable chars.\n  validchars="$(echo $1 | sed -e \'s/[^[:alnum:]]//g\')"\n\n  if [ "$validchars" = "$1" ] ; then\n    return 0\n  else\n    return 1\n  fi\n}\n\nexit validAlphaNum\n\n')),(0,a.kt)("h2",{id:"know-if-someone-running-the-script-directly-with--bash_source"},"Know if someone running the script directly with  ",(0,a.kt)("inlineCode",{parentName:"h2"},"$BASH_SOURCE")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"$BASH_SOURCE")," can let you differentiate between when a script is run standalone vs when its invoked from another script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'if [ "$BASH_SOURCE" = "$0" ]\n')),(0,a.kt)("h2",{id:"xargs"},(0,a.kt)("inlineCode",{parentName:"h2"},"xargs")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.cyberciti.biz/faq/linux-unix-bsd-xargs-construct-argument-lists-utility/"},"https://www.cyberciti.biz/faq/linux-unix-bsd-xargs-construct-argument-lists-utility/")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"> echo 1 2 3 4 | xargs -n2 -I {} echo hello {} world                                                                                                                                                                                                                                                   \nhello 1 2 world\nhello 3 4 world\n\n")))}u.isMDXComponent=!0}}]);