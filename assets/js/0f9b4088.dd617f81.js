"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[462],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=i(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8473:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return i},assets:function(){return d},toc:function(){return c},default:function(){return f}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],p={title:"Data in fastai"},s=void 0,i={unversionedId:"fastai/data",id:"fastai/data",title:"Data in fastai",description:"One of the most important things in fastai to understand is how you prepare your data for a model.  The main workhorse for accomplishing this in fastai is the DataBlock api.  Here is a hello world example of how this works:",source:"@site/docs/fastai/03_data.md",sourceDirName:"fastai",slug:"/fastai/data",permalink:"/fastai/data",editUrl:"https://github.dev/hamelsmu/notes/blob/master/docs/fastai/03_data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Data in fastai"},sidebar:"tutorialSidebar",previous:{title:"2_Computer_Vision",permalink:"/fastai/cv"},next:{title:"Batch Predictions",permalink:"/fastai/batch_predicitions"}},d={},c=[{value:"Hello World DataBlock",id:"hello-world-datablock",level:2},{value:"With A DataFrame",id:"with-a-dataframe",level:3}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},m=u("CodeOutputBlock"),k=u("HTMLOutputBlock"),g={toc:c};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from fastbook import *\n")),(0,o.kt)("h1",{id:"data-in-fastai"},"Data In fastai"),(0,o.kt)("p",null,"One of the most important things in fastai to understand is how you prepare your data for a model.  The main workhorse for accomplishing this in fastai is the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataBlock")," api.  Here is a hello world example of how this works:"),(0,o.kt)("h2",{id:"hello-world-datablock"},"Hello World DataBlock"),(0,o.kt)("p",null,"The argument ",(0,o.kt)("inlineCode",{parentName:"p"},"get_x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"get_y")," operate on an iterable.  Let's define an interable as our data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"data = list(range(100))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_x(r): return r\ndef get_y(r): return r + 10\ndblock = DataBlock(get_x=get_x, get_y = get_y)\ndsets = dblock.datasets(data)\n")),(0,o.kt)("p",null,"You can see a dataset like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dsets.train[0]\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(89, 99)\n"))),(0,o.kt)("p",null,"You can also see a DataLoader like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dls = dblock.dataloaders(data, bs=5)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"next(iter(dls.train))\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(tensor([57, 66, 73, 30, 14]), tensor([67, 76, 83, 40, 24]))\n"))),(0,o.kt)("h3",{id:"with-a-dataframe"},"With A DataFrame"),(0,o.kt)("p",null,"Similarly, you can operate on one row at a time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\ndf = pd.DataFrame({'x': range(100), 'y': range(100) })\ndf.head()\n")),(0,o.kt)(k,{mdxType:"HTMLOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border="1" class="dataframe">\n  <thead>\n    <tr style="text-align: right;">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_x(r): return r.x\ndef get_y(r): return r.y + 10\ndblock = DataBlock(get_x=get_x, get_y=get_y)\ndsets = dblock.datasets(df)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dsets.train[0]\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(78, 88)\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dls = dblock.dataloaders(df, bs=3)\nnext(iter(dls.train))\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(tensor([90, 55, 11]), tensor([100,  65,  21]))\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def tracer(nm):\n    def f(x, nm):\n        # print(f'{nm}:')\n        # print(f'\\tinput: {x}')\n        # import ipdb; ipdb.set_trace()\n        return str(x)\n    return partial(f, nm=nm)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def mult_0(x): return x * 0\ndef add_1(x): return x +1 \ntb = TransformBlock(item_tfms=[tracer('item_tfms')])\n# def get_y(l): return sum(l)\ndb = DataBlock(blocks=(TransformBlock, TransformBlock),\n               get_x=mult_0,\n               get_y=add_1,\n               item_tfms=lambda x: str(x))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"data = L(range(10))\nresult = db.datasets(data)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.summary(data)\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Setting-up type transforms pipelines\nCollecting items from [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nFound 10 items\n2 datasets of sizes 8,2\nSetting up Pipeline: mult_0\nSetting up Pipeline: add_1\n\nBuilding one sample\n  Pipeline: mult_0\n    starting from\n      1\n    applying mult_0 gives\n      0\n  Pipeline: add_1\n    starting from\n      1\n    applying add_1 gives\n      2\n\nFinal sample: (0, 2)\n\n\nCollecting items from [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nFound 10 items\n2 datasets of sizes 8,2\nSetting up Pipeline: mult_0\nSetting up Pipeline: add_1\nSetting up after_item: Pipeline: <lambda> -> ToTensor\nSetting up before_batch: Pipeline: \nSetting up after_batch: Pipeline: \n\nBuilding one batch\nApplying item_tfms to the first sample:\n  Pipeline: <lambda> -> ToTensor\n    starting from\n      (0, 2)\n    applying <lambda> gives\n      (0, 2)\n    applying ToTensor gives\n      (0, 2)\n\nAdding the next 3 samples\n\nNo before_batch transform to apply\n\nCollating items in a batch\n\nNo batch_tfms to apply\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"result.train[0]\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(0, 5)\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"result = db.dataloaders(data, bs=3)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"thing = iter(result.train)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"next(thing)\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(('0', '0', '0'), ('6', '7', '4'))\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"next(thing)\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(('0', '0', '0'), ('9', '5', '3'))\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"??TransformBlock\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db = DataBlock(blocks=(TransformBlock, tb),\n              get_y=lambda x: str(x),\n              batch_tfms=tracer('batch_tfms'))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"result = db.datasets(data)\nresult = db.dataloaders(data, bs=3)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"result\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<fastai.data.core.DataLoaders at 0x7f9e08ff0160>\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"thing = iter(result.train)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"next(thing)\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(('1', '5', '6'), ('1', '5', '6'))\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"f = aug_transforms()[0]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"f\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Flip -- {'size': None, 'mode': 'bilinear', 'pad_mode': 'reflection', 'mode_mask': 'nearest', 'align_corners': True, 'p': 0.5}:\nencodes: (TensorImage,object) -> encodes\n(TensorMask,object) -> encodes\n(TensorBBox,object) -> encodes\n(TensorPoint,object) -> encodes\ndecodes: \n"))))}f.isMDXComponent=!0}}]);